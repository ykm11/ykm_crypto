from Crypto.Util.number import bytes_to_long
from Crypto.Util.number import getStrongPrime
from Crypto.Util.number import inverse
from keys import flag


def gen_key(k):
    p = getStrongPrime(k)
    q = getStrongPrime(k)
    n = p*q
    e = (p-1)*(q-1) + 2**16 + 1
    return n, e


if __name__ == "__main__":
    n, e = gen_key(512)
    m = bytes_to_long(flag)
    c = pow(m, e, n)

    print("[+] Public Key :", (n, e))
    print("[+] Cipher :", c)

#[+] Public Key : (134262191675054229618099581016819325058656813525614906900983314823374428400506659918709980963824498086620464474542592112893400921931887239411956336237423137659102766448905455156841566802493123630123722226452250522627356543516805879267451258655805324920563675682266897791163486650605179066389540440722661394751, 134262191675054229618099581016819325058656813525614906900983314823374428400506659918709980963824498086620464474542592112893400921931887239411956336237423114474102070195956736732461773448053363559856719054281367992841206177380800432068781692334681929703440114760302946277706578133790428721429967997840764227489)
#[+] Cipher : 103919739039696565377337660908194151214937465882064598593646362270987576930136121633949178501295045658461594935518681182793940989131163063247456081179805184610446800622569693082813481809744257575973144285649470660141139731886607726556209585376797630886778056129232744528671798113417644433896594239784279536742

    import hashlib
    print(hashlib.sha1(flag).hexdigest())
    #f5e7774ded6a5175154e14d5492341a0b70ba22f<Paste>
